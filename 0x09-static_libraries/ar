#include "main.h"
/**
 * _isupper - Checks if a character is upper
 * @c: The character to be checked
 * Return: 0 when is lower and 1 when is upper
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
/**
 * _putchar -writes c to stdout
 * Return: Always 1 (Success)
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	return (0);
}
/**
 * _isalpha - Checks the case of alphabet
 * @c: the character to be checked
 * Return: 1 for when it is upper or lower and 0 for the rest
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	return (0);
}
/**
 * _abs - prints absolute value of a digit
 * @c: the integer for operation
 * Return: returns absolute value of an integer
 */
int _abs(int c)
{
	if (c < 0)
	{
		int absolute = c * -1;

		return (absolute);
	}
	return (c);
}
/**
 * _isdigit - Checks if n is digit
 * @c: the paramter to be checked
 * Return: 0 if it is not a digit and 1 if it is
 */
int _isdigit(int c)
{
	if (c <= 57 && c >= 48)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
/**
 * _strlen - Computes the length of a string
 * @s: string for operation
 * Return: returns string length
 */
int _strlen(char *s)
{
	int length = 0;

	while (s[length] != '\0')
	{
		length++;
	}
	return (length);
}
/**
 * _puts - functions as the c put function
 * @str: string for operation
 */

void _puts(char *str)
{
	int length = 0;

	while (str[length] != '\0')
	{
		_putchar(str[length]);
		length++;
	}
	_putchar('\n');
}
/**
 * *_strcpy - copies string
 * @dest: where to copy to
 * @src: string to be copied
 * Return: returns the copied string in dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}
/**
 * _strcat - appends a string to another
 * @dest: variable with appended string
 * @src: string to be appended
 * Return: return the string dest
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	j = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}
/**
 * _strncat - it concatenates strings
 * @dest: string to print
 * @src: string being added
 * @n: bytes to add
 * Return: returns dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int index = 0;
	int dest_len = 0;

	while (dest[index])
	{
		index++;
		dest_len++;
	}
	for (index = 0; index < n && src[index] != '\0'; index++)
	{
		dest[dest_len++] = src[index];
	}
	return (dest);
}
/**
 * _strncpy - copies src to dest
 * @dest: destination to copy to
 * @src: what is being copied
 * @n: byte copying
 * Return: returns the copied string dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int index = 0;
	int src_len = 0;

	while (src[index++])
	{
		src_len++;
	}
	for (index = 0; src[index] && index < n; index++)
	{
		dest[index] = src[index];
	}
	for (index = src_len; index < n; index++)
	{
		dest[index] = '\0';
	}
	return (dest);
}
/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: string differnce in ASCII
 */
int _strcmp(char *s1, char *s2)
{
	int index = 0;

	while (s1[index] && s2[index] && s1[index] == s2[index])
	{
		index++;
	}
	return (s1[index] - s2[index]);
}
/**
 * _atoi - converts string to integer
 * @s: string to be converted
 * Return: Value of converted string
 */
int _atoi(char *s)
{
	int result, j, i;

	result = 0;
	j = -1;
	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
			j *= -1;

		if (s[i] > 47 && s[i] < 58)
		{
			if (result < 0)
				result = (result * 10) - (s[i] - '0');
			else
				result = (s[i] - '0') * -1;

			if (s[i + 1] < 48 || s[i + 1] > 57)
				break;
		}
	}
	if (j < 0)
		result *= -1;

	return (result);
}
/**
 * _memset - allcates memeory for char storage
 * @s: location to fill
 * @b: char bytes to fill with
 * @n: number of bytes to fill
 * Return: returns pointer to location filled
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *start = s;

	while (n--)
	{
		*s = b;
		s++;
	}
	return (start);
}
/**
 * _memcpy - copies src to dest
 * @dest: place to copy to
 * @src: what we desire to copy
 * @n: the number of bytes
 * Return: returns a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *new = dest;

	while (n--)
	{
		*dest = *src;
		src++;
		dest++;
	}
	return (new);
}
/**
 * _strchr - a function that locates a character in a string.
 * @s: an input string to search in for character
 * @c: an input character to search for string
 * Return: returns pointer to c position
 */
char *_strchr(char *s, char c)
{

	while (*s)
	{
		if (c == *s)
			return (s);
		s++;
	}
	if (c == *s)
		return (s);
	return (NULL);
}
/**
 * _strspn - gives the length of a substring
 * @s: string input to the function
 * @accept: input character to locate in string s
 * Return: return pointer to the c position
 */
unsigned int _strspn(char *s, char *accept)
{
	int i = 0, flag;
	char *start = accept;

	while (*s)
	{
		flag = 0;
		while (*accept)
		{
			if (*accept == *s)
			{
				i++;
				flag = 1;
				break;
			}
			accept++;
		}
		s++;
		accept = start;
		if (flag == 0)
			break;
	}
	return (i);
}
/**
 * _strpbrk -  a function that searches a string for any of a set of bytes.
 * @s: an input string
 * @accept: an input character with which we locate into string s
 * Return:  a pointer to the byte in s that matches one of the bytes in accept,
 * or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	char *ch = accept;

	while (*s)
	{
		while (*accept)
		{
			if (*accept == *s)
				return (s);
			accept++;
		}

		accept = ch;
		s++;
	}
	return (NULL);
}
/**
 * _strstr -  a function that locates a substring.
 * @haystack: an input string to search in
 * @needle: an input string to locate into string haystack
 * Return:  a pointer to the beginning of the located substring,
 * or NULL if the substring is not found.
 */
char *_strstr(char *haystack, char *needle)
{
	char *startn = needle, *starth = haystack;

	while (*haystack)
	{
		starth = haystack;
		needle = startn;
		while (*haystack == *needle)
		{
			haystack++;
			needle++;
		}

		if (*needle == '\0')
			return (haystack);
		haystack = starth + 1;
	}
	return (NULL);
}
